{"ast":null,"code":"/* global define */\n\n/**\n * Uberproto\n *\n * A base object for ECMAScript 5 style prototypal inheritance.\n *\n * @see https://github.com/rauschma/proto-js/\n * @see http://ejohn.org/blog/simple-javascript-inheritance/\n * @see http://uxebu.com/blog/2011/02/23/object-based-inheritance-for-ecmascript-5/\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.Proto = factory();\n  }\n})(this, function () {\n  var HAS_SYMBOLS = typeof Object.getOwnPropertySymbols === 'function';\n\n  function makeSuper(_super, old, name, fn) {\n    var isFunction = typeof old === 'function';\n\n    var newMethod = function () {\n      var tmp = this._super; // Add a new ._super() method that is the same method\n      // but either pointing to the prototype method\n      // or to the overwritten method\n\n      this._super = isFunction ? old : _super[name]; // The method only need to be bound temporarily, so we\n      // remove it when we're done executing\n\n      var ret = fn.apply(this, arguments);\n      this._super = tmp;\n      return ret;\n    };\n\n    if (isFunction && HAS_SYMBOLS) {\n      Object.getOwnPropertySymbols(old).forEach(function (name) {\n        newMethod[name] = old[name];\n      });\n    }\n\n    return newMethod;\n  }\n\n  return {\n    /**\n     * Create a new object using Object.create. The arguments will be\n     * passed to the new instances init method or to a method name set in\n     * __init.\n     */\n    create: function () {\n      var instance = Object.create(this);\n      var init = typeof instance.__init === 'string' ? instance.__init : 'init';\n\n      if (typeof instance[init] === 'function') {\n        instance[init].apply(instance, arguments);\n      }\n\n      return instance;\n    },\n\n    /**\n     * Mixin a given set of properties\n     * @param prop The properties to mix in\n     * @param obj [optional]\n     * The object to add the mixin\n     */\n    mixin: function (prop, obj) {\n      var self = obj || this;\n      var fnTest = /\\b_super\\b/;\n\n      var _super = Object.getPrototypeOf(self) || self.prototype;\n\n      var descriptors = {};\n      var proto = prop;\n\n      var processProperty = function (name) {\n        var descriptor = Object.getOwnPropertyDescriptor(proto, name);\n\n        if (!descriptors[name] && descriptor) {\n          descriptors[name] = descriptor;\n        }\n      }; // Collect all property descriptors\n\n\n      do {\n        Object.getOwnPropertyNames(proto).forEach(processProperty);\n\n        if (HAS_SYMBOLS) {\n          Object.getOwnPropertySymbols(proto).forEach(processProperty);\n        }\n      } while ((proto = Object.getPrototypeOf(proto)) && Object.getPrototypeOf(proto));\n\n      var processDescriptor = function (name) {\n        var descriptor = descriptors[name];\n\n        if (typeof descriptor.value === 'function' && fnTest.test(descriptor.value)) {\n          descriptor.value = makeSuper(_super, self[name], name, descriptor.value);\n        }\n\n        Object.defineProperty(self, name, descriptor);\n      };\n\n      Object.keys(descriptors).forEach(processDescriptor);\n\n      if (HAS_SYMBOLS) {\n        Object.getOwnPropertySymbols(descriptors).forEach(processDescriptor);\n      }\n\n      return self;\n    },\n\n    /**\n     * Extend the current or a given object with the given property and return the extended object.\n     * @param prop The properties to extend with\n     * @param obj [optional] The object to extend from\n     * @returns The extended object\n     */\n    extend: function (prop, obj) {\n      return this.mixin(prop, Object.create(obj || this));\n    },\n\n    /**\n     * Return a callback function with this set to the current or a given context object.\n     * @param name Name of the method to proxy\n     * @param args... [optional] Arguments to use for partial application\n     */\n    proxy: function (name) {\n      var fn = this[name];\n      var args = Array.prototype.slice.call(arguments, 1);\n      args.unshift(this);\n      return fn.bind.apply(fn, args);\n    }\n  };\n});","map":{"version":3,"sources":["/Users/parthjhaveri/Desktop/tile-geo/node_modules/uberproto/lib/proto.js"],"names":["root","factory","define","amd","exports","module","Proto","HAS_SYMBOLS","Object","getOwnPropertySymbols","makeSuper","_super","old","name","fn","isFunction","newMethod","tmp","ret","apply","arguments","forEach","create","instance","init","__init","mixin","prop","obj","self","fnTest","getPrototypeOf","prototype","descriptors","proto","processProperty","descriptor","getOwnPropertyDescriptor","getOwnPropertyNames","processDescriptor","value","test","defineProperty","keys","extend","proxy","args","Array","slice","call","unshift","bind"],"mappings":"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","sourcesContent":["/* global define */\n/**\n * Uberproto\n *\n * A base object for ECMAScript 5 style prototypal inheritance.\n *\n * @see https://github.com/rauschma/proto-js/\n * @see http://ejohn.org/blog/simple-javascript-inheritance/\n * @see http://uxebu.com/blog/2011/02/23/object-based-inheritance-for-ecmascript-5/\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.Proto = factory();\n  }\n}(this, function () {\n  var HAS_SYMBOLS = typeof Object.getOwnPropertySymbols === 'function';\n\n  function makeSuper (_super, old, name, fn) {\n    var isFunction = typeof old === 'function';\n    var newMethod = function () {\n      var tmp = this._super;\n\n      // Add a new ._super() method that is the same method\n      // but either pointing to the prototype method\n      // or to the overwritten method\n      this._super = isFunction ? old : _super[name];\n\n      // The method only need to be bound temporarily, so we\n      // remove it when we're done executing\n      var ret = fn.apply(this, arguments);\n\n      this._super = tmp;\n\n      return ret;\n    };\n\n    if (isFunction && HAS_SYMBOLS) {\n      Object.getOwnPropertySymbols(old).forEach(function (name) {\n        newMethod[name] = old[name];\n      });\n    }\n\n    return newMethod;\n  }\n\n  return {\n    /**\n     * Create a new object using Object.create. The arguments will be\n     * passed to the new instances init method or to a method name set in\n     * __init.\n     */\n    create: function () {\n      var instance = Object.create(this);\n      var init = typeof instance.__init === 'string' ? instance.__init : 'init';\n\n      if (typeof instance[init] === 'function') {\n        instance[init].apply(instance, arguments);\n      }\n      return instance;\n    },\n    /**\n     * Mixin a given set of properties\n     * @param prop The properties to mix in\n     * @param obj [optional]\n     * The object to add the mixin\n     */\n    mixin: function (prop, obj) {\n      var self = obj || this;\n      var fnTest = /\\b_super\\b/;\n      var _super = Object.getPrototypeOf(self) || self.prototype;\n      var descriptors = {};\n      var proto = prop;\n      var processProperty = function (name) {\n        var descriptor = Object.getOwnPropertyDescriptor(proto, name);\n\n        if (!descriptors[name] && descriptor) {\n          descriptors[name] = descriptor;\n        }\n      };\n\n      // Collect all property descriptors\n      do {\n        Object.getOwnPropertyNames(proto).forEach(processProperty);\n\n        if (HAS_SYMBOLS) {\n          Object.getOwnPropertySymbols(proto).forEach(processProperty);\n        }\n      } while ((proto = Object.getPrototypeOf(proto)) && Object.getPrototypeOf(proto));\n\n      var processDescriptor = function (name) {\n        var descriptor = descriptors[name];\n\n        if (typeof descriptor.value === 'function' && fnTest.test(descriptor.value)) {\n          descriptor.value = makeSuper(_super, self[name], name, descriptor.value);\n        }\n\n        Object.defineProperty(self, name, descriptor);\n      };\n\n      Object.keys(descriptors).forEach(processDescriptor);\n\n      if (HAS_SYMBOLS) {\n        Object.getOwnPropertySymbols(descriptors).forEach(processDescriptor);\n      }\n\n      return self;\n    },\n    /**\n     * Extend the current or a given object with the given property and return the extended object.\n     * @param prop The properties to extend with\n     * @param obj [optional] The object to extend from\n     * @returns The extended object\n     */\n    extend: function (prop, obj) {\n      return this.mixin(prop, Object.create(obj || this));\n    },\n    /**\n     * Return a callback function with this set to the current or a given context object.\n     * @param name Name of the method to proxy\n     * @param args... [optional] Arguments to use for partial application\n     */\n    proxy: function (name) {\n      var fn = this[name];\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      args.unshift(this);\n      return fn.bind.apply(fn, args);\n    }\n  };\n}));\n"]},"metadata":{},"sourceType":"script"}